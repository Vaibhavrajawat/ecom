// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User model for authentication
model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  password       String?
  image          String?
  phone          String?
  role           Role      @default(USER)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  sessions       Session[]
  orders         Order[]
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @map("id_token")
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Product models for digital products
model Product {
  id             String       @id @default(cuid())
  name           String
  description    String
  price          Float
  salePrice      Float?       // Optional sale price
  imageUrl       String       
  features       String       // JSON string containing features list
  details        String       // Longer product details/description
  periodicity    String?      // e.g., "monthly", "annual", "lifetime"
  accountType    String?      // e.g., "Premium", "Standard", "Plus"
  categoryId     String
  slug           String       @unique // URL-friendly version of the name
  category       Category     @relation(fields: [categoryId], references: [id])
  type           ProductType  @default(SUBSCRIPTION)
  duration       Int?         // Duration in days for subscription products
  featured       Boolean      @default(false)
  active         Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  orderItems     OrderItem[]
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  image     String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Order models
model Order {
  id        String      @id @default(cuid())
  userId    String
  total     Float
  createdAt DateTime    @default(now())
  status    OrderStatus @default(PENDING)
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
  credentials Credentials?
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
}

model Credentials {
  id          String   @id @default(cuid())
  orderId     String   @unique
  email       String?
  password    String?
  details     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

// Enums
enum Role {
  USER
  ADMIN
}

enum ProductType {
  SUBSCRIPTION
  ONE_TIME
  LIFETIME
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

model SiteSettings {
  id               String   @id @default("default")
  title           String?
  metaDescription String?
  canonicalUrl    String?
  logoUrl         String?
  faviconUrl      String?
  contactEmail    String?
  supportEmail    String?
  address         String?
  googleAnalyticsId String?
  facebookPixelId String?
  customHeaderTags String?
  customFooterTags String?
  googleClientId  String?
  googleClientSecret String?
  facebookAppId   String?
  facebookAppSecret String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
